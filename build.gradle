group 'com.rover12421'
version '1.2.47'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'idea'

sourceCompatibility = 1.7
targetCompatibility = 1.7

buildscript {
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'https://oss.sonatype.org/service/local/repositories/releases/content/' }
        maven { url 'https://jitpack.io' }
        google()
        mavenCentral()
        jcenter()
    }
}

repositories {
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url 'https://oss.sonatype.org/service/local/repositories/releases/content/' }
    maven { url 'https://jitpack.io' }
    google()
    mavenCentral()
    jcenter()
}

configurations {
    provided
}

sourceSets {
    main { compileClasspath += configurations.provided }
    test { compileClasspath += configurations.provided }
}

def loadProperties(String sourceFileName) {
    def config = new Properties()
    def propFile = new File(sourceFileName)
    System.err.println("Loading property file: " + propFile.absolutePath)
    if (propFile.canRead()) {
        config.load(new FileInputStream(propFile))
        for (Map.Entry property in config) {
            System.out.println("setting " + property.key)
            project.ext[property.key] = property.value
        }
    }
}

loadProperties("local.properties")

dependencies {
    provided 'javax.servlet:javax.servlet-api:3.1.0'
    provided 'javax.ws.rs:javax.ws.rs-api:2.0.1'
    provided 'org.apache.cxf:cxf-rt-transports-http:3.1.2'
    provided 'org.apache.cxf:cxf-rt-frontend-jaxrs:3.1.2'
    provided 'org.springframework:spring-websocket:4.3.7.RELEASE'
    provided 'org.springframework:spring-webmvc:4.3.7.RELEASE'
    provided 'org.springframework:spring-messaging:4.3.7.RELEASE'
    provided 'org.springframework.data:spring-data-redis:1.8.6.RELEASE'
    provided 'com.squareup.retrofit2:retrofit:2.1.0'
    provided 'com.squareup.okhttp3:okhttp:3.6.0'
    provided 'io.springfox:springfox-spring-web:2.6.1'
    provided 'io.javaslang:javaslang:2.0.6'
    provided 'org.glassfish.jersey.core:jersey-common:2.23.2'

    testCompile 'org.eclipse.jetty:jetty-server:8.1.8.v20121106'
    testCompile 'org.eclipse.jetty:jetty-webapp:8.1.8.v20121106'
    testCompile 'com.fasterxml.jackson.core:jackson-databind:2.9.0'
    testCompile 'com.fasterxml.jackson.module:jackson-module-afterburner:2.9.0'
    testCompile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.0'
    testCompile 'cglib:cglib-nodep:2.2.2'
    testCompile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.8.7'
    testCompile 'com.googlecode.json-simple:json-simple:1.1.1'
    testCompile 'commons-io:commons-io:1.4'
    testCompile 'net.sf.json-lib:json-lib:2.4:jdk15'
    testCompile 'com.google.code.gson:gson:2.6.2'
    testCompile 'net.minidev:json-smart:2.2.1'
    testCompile 'org.clojure:clojure:1.5.1'
    testCompile 'org.codehaus.groovy:groovy:2.1.5'
    testCompile 'org.springframework:spring-test:4.3.7.RELEASE'
    testCompile 'org.javassist:javassist:3.18.0-GA'
    testCompile 'org.apache.cxf:cxf-rt-rs-client:3.1.2'
    testCompile 'org.springframework.data:spring-data-commons-core:1.4.1.RELEASE'
    testCompile 'org.glassfish.jersey.containers:jersey-container-servlet:2.23.2'
    testCompile 'org.glassfish.jersey.core:jersey-client:2.23.2'
    testCompile 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-jdk-http:2.23.2'
    testCompile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.23.2'
    testCompile 'com.jsoniter:jsoniter:0.9.8'
    testCompile 'org.apache.commons:commons-lang3:3.4'
    testCompile 'org.hibernate:hibernate-core:5.2.10.Final'
    testCompile 'com.jayway.jsonpath:json-path:2.3.0'
    testCompile 'org.jetbrains.kotlin:kotlin-stdlib:1.2.41'
    testCompile 'org.jetbrains.kotlin:kotlin-reflect:1.1.3-2'
    testCompile 'org.springframework.security:spring-security-web:4.2.3.RELEASE'
    testCompile 'org.apache.commons:commons-collections4:4.1'
    testCompile 'junit:junit:4.12'
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

signing {
    required { gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives
}

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.archives

        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

        pom.artifactId = project.name

        pom.project {
            name project.name
            description "fastjson"
            url 'http://www.rover12421.com'
            packaging 'jar'
            licenses {
                license {
                    name 'MIT License'
                    url 'https://opensource.org/licenses/mit-license.php'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/rover12421/fastjson/tree/master'
                connection 'scm:git:git://github.com/rover12421/fastjson.git'
                developerConnection 'scm:git:git@github.com:rover12421/fastjson.git'
            }
            developers {
                developer {
                    id 'rover12421'
                    name 'Rover12421'
                    email 'rover12421@163.com'
                }
            }
        }
    }
}

// used for official releases only. Please don't use
task release {
}

tasks.getByPath(":release").dependsOn(uploadArchives)
